import {
  createHead
} from "./chunk-37B3WBQD.js";
import {
  createMemoryHistory,
  createRouter,
  createWebHistory
} from "./chunk-IUH7OZPS.js";
import "./chunk-4QSBUCKU.js";
import {
  createApp,
  createSSRApp,
  defineComponent
} from "./chunk-5IFXMRWK.js";
import {
  __require
} from "./chunk-OZ4PPLJW.js";

// node_modules/.pnpm/vite-ssg@0.15.6_e43eb5501679e018e24a10d0bd71d9e5/node_modules/vite-ssg/dist/chunk-YPUM4SRK.mjs
var UNSAFE_CHARS_REGEXP = /[<>\/\u2028\u2029]/g;
var ESCAPED_CHARS = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
function escapeUnsafeChars(unsafeChar) {
  return ESCAPED_CHARS[unsafeChar];
}
function serializeState(state) {
  if (state == null || Object.keys(state).length === 0)
    return null;
  try {
    return JSON.stringify(JSON.stringify(state || {})).replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);
  } catch (error) {
    console.error("[SSG] On state serialization -", error, state);
    return null;
  }
}
function deserializeState(state) {
  try {
    return JSON.parse(state || "{}");
  } catch (error) {
    console.error("[SSG] On state deserialization -", error, state);
    return {};
  }
}
var ClientOnly = defineComponent({
  render() {
    return this.$slots.default && this.$slots.default({});
  }
});

// node_modules/.pnpm/vite-ssg@0.15.6_e43eb5501679e018e24a10d0bd71d9e5/node_modules/vite-ssg/dist/chunk-UH52UDT5.mjs
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require2 = ((x) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof __require !== "undefined" ? __require : a)[b]
}) : x)(function(x) {
  if (typeof __require !== "undefined")
    return __require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// node_modules/.pnpm/vite-ssg@0.15.6_e43eb5501679e018e24a10d0bd71d9e5/node_modules/vite-ssg/dist/index.mjs
function ViteSSG(App, routerOptions, fn, options = {}) {
  const {
    transformState,
    registerComponents = true,
    useHead = true,
    rootContainer = "#app"
  } = options;
  const isClient = typeof window !== "undefined";
  async function createApp2(client = false, routePath) {
    var _a, _b;
    const app = client ? createApp(App) : createSSRApp(App);
    let head;
    if (useHead) {
      head = createHead();
      app.use(head);
    }
    const router = createRouter(__spreadValues({
      history: client ? createWebHistory(routerOptions.base) : createMemoryHistory(routerOptions.base)
    }, routerOptions));
    const { routes } = routerOptions;
    if (registerComponents)
      app.component("ClientOnly", client ? ClientOnly : { render: () => null });
    const context = {
      app,
      head,
      isClient,
      router,
      routes,
      initialState: {},
      routePath
    };
    if (client)
      context.initialState = (transformState == null ? void 0 : transformState(window.__INITIAL_STATE__ || {})) || deserializeState(window.__INITIAL_STATE__);
    await (fn == null ? void 0 : fn(context));
    app.use(router);
    let entryRoutePath;
    let isFirstRoute = true;
    router.beforeEach((to, from, next) => {
      if (isFirstRoute || entryRoutePath && entryRoutePath === to.path) {
        isFirstRoute = false;
        entryRoutePath = to.path;
        to.meta.state = context.initialState;
      }
      next();
    });
    if (!client) {
      const route = (_b = (_a = context.routePath) != null ? _a : routerOptions.base) != null ? _b : "/";
      router.push(route);
      await router.isReady();
      context.initialState = router.currentRoute.value.meta.state || {};
    }
    const initialState = (transformState == null ? void 0 : transformState(context.initialState)) || serializeState(context.initialState);
    return __spreadProps(__spreadValues({}, context), {
      initialState
    });
  }
  if (isClient) {
    (async () => {
      const { app, router } = await createApp2(true);
      await router.isReady();
      app.mount(rootContainer, true);
    })();
  }
  return createApp2;
}
export {
  ViteSSG
};
//# sourceMappingURL=vite-ssg.js.map
